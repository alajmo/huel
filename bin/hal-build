#!/usr/bin/env node

const defaultConfig = require('../config/default.json');
const program = require('commander');
const tasks = require('../src/tasks/tasks.js');

program
  .option(
    '--env [env]',
    `environment. [string] [default: ${defaultConfig.env}]`
  )
  .option(
    '-t, --template <template>',
    `template for project. [string] [required] [default: ${
      defaultConfig.template
    }]`
  )
  .option(
    '-e, --entry <entry>',
    `entry for project. [string] [required] [default: ${defaultConfig.entry}]`
  )
  .option(
    '-o, --output <output>',
    `output for project. [string] [required] [default: ${defaultConfig.output}]`
  )
  .option('-l, --lint <src>', `lint entry folder before build. [string]`)
  .option('-f, --format <src>', `format entry folder before build. [string]`)
  .option(
    '-w, --watch',
    `start development server. [boolean] [default: ${defaultConfig.watch}]`
  )
  .option(
    '-p, --port [port]',
    `port webpack-dev-server listens on. [integer] [default: ${
      defaultConfig.port
    }]`
  )
  .on('--help', () => {
    console.log(`

  Examples:
    Production build
    $ hal build -t src/index.html -e src/app.js -o dist

    Start webpack-dev-server
    $ hal build -w -p 3001 -t src/index.html -e src/app.js -o dist
  `);
  })
  .parse(process.argv);

function getBuildOptions(options) {
  if (!options.template) {
    console.error('error: option -t, --template with value is required');
    process.exit(1);
  }

  if (!options.entry) {
    console.error('error: option -e, --entry with value is required');
    process.exit(1);
  }

  if (!options.output) {
    console.error('error: option -o, --output with value is required');
    process.exit(1);
  }

  return Object.freeze({
    entry: options.entry || defaultConfig.entry,
    env: options.env || defaultConfig.env,
    lint: options.lint || defaultConfig.lint,
    format: options.format || defaultConfig.format,
    output: options.output || defaultConfig.output,
    port: options.port || defaultConfig.port,
    template: options.template || defaultConfig.template,
    watch: options.watch || defaultConfig.watch
  });
}

main();
function main() {
  const opt = getBuildOptions(program);
  tasks.build(opt);
}

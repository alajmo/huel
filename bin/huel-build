#!/usr/bin/env node

const defaultConfig = require('../config/huel.config.json');
const program = require('commander');
const tasks = require('../src/tasks/tasks.js');
const yaml = require('js-yaml');
const fs = require('fs');
const path = require('path');

program
  .option('--debug', `debug. [string] [default: ${defaultConfig.debug}]`)
  .option(
    '--env [env]',
    `environment. [string] [default: ${defaultConfig.env}]`
  )
  .option(
    '-f, --config <config>',
    `config file for project. [string] [default: ${defaultConfig.configName}]`
  )
  .option(
    '-t, --template <template>',
    `template for project. [string] [required] [default: ${
      defaultConfig.template
    }]`
  )
  .option(
    '-e, --entry <entry>',
    `entry for project. [string] [required] [default: ${defaultConfig.entry}]`
  )
  .option(
    '-o, --output <output>',
    `output for project. [string] [required] [default: ${defaultConfig.output}]`
  )
  .option(
    '-w, --watch',
    `start development server. [boolean] [default: ${defaultConfig.watch}]`
  )
  .option(
    '-p, --port [port]',
    `port webpack-dev-server listens on. [integer] [default: ${
      defaultConfig.port
    }]`
  )
  .on('--help', () => {
    console.log(`

  Examples:
    Production build
    $ huel build -t src/index.html -e src/app.js -o dist

    Start webpack-dev-server
    $ huel build -w -p 3001 -t src/index.html -e src/app.js -o dist
  `);
  })
  .parse(process.argv);

function getBuildOptions(flag) {
  if (flag.env !== undefined) {
    if (!['production', 'development'].includes(flag.env)) {
      console.error(
        `error: option -e, --env requires either value 'production' or 'development'`
      );
      process.exit(1);
    }
  }

  let flagConfig = {};
  if (flag.config) {
    flagConfig = yaml.safeLoad(fs.readFileSync(flag.config, 'utf8'));
  } else if (fs.existsSync(defaultConfig.configName)) {
    flagConfig = yaml.safeLoad(
      fs.readFileSync(defaultConfig.configName, 'utf8')
    );
  }

  if (!flag.template && !flagConfig.template) {
    console.error('error: template is required');
    process.exit(1);
  }

  if (!flag.entry && !flagConfig.entry) {
    console.error('error: entry is required');
    process.exit(1);
  }

  if (!flag.output && !flagConfig.output) {
    console.error('error: output is required');
    process.exit(1);
  }

  return Object.freeze({
    debug: flag.debug || defaultConfig.debug,
    entry: flag.entry || flagConfig.entry || defaultConfig.entry,
    env: flag.env || defaultConfig.env,
    output: flag.output || flagConfig.output || defaultConfig.output,
    port: flag.port || defaultConfig.port,
    template: flag.template || flagConfig.template || defaultConfig.template,
    plugins: flagConfig.plugins,
    copyFiles: flagConfig.copyFiles,
    watch: flag.watch || defaultConfig.watch
  });
}

main();
function main() {
  const opt = getBuildOptions(program);
  tasks.build(opt);
}

#!/usr/bin/env node

const defaultConfig = require('../config/huel.config.json');
const program = require('commander');
const tasks = require('../src/tasks/tasks.js');

program
  .option(
    '-v, --verbose',
    `verbose printing. [boolean] [default: ${defaultConfig.verbose}]`
  )
  .option(
    '-a, --all',
    `run all tests. [boolean] [default: ${defaultConfig.allTests}]`
  )
  .option(
    '-p, --pjv',
    `check package.json. [boolean] [default: ${defaultConfig.packageJsonCheck}]`
  )
  .option(
    '-r, --strict-version',
    `enforce strict versioning for modules. [boolean] [default: ${
      defaultConfig.strictVersion
    }]`
  )
  .option(
    '-s, --size [path]',
    `size limit test. [string] [default: ${defaultConfig.sizeLimitCheck}]`
  )
  .option(
    '-d, --depcheck',
    `dependency check. [boolean] [default: ${defaultConfig.dependencyCheck}]`
  )
  .option(
    '-n, --nodecheck',
    `node version check. [boolean] [default: ${defaultConfig.nodeCheck}]`
  )
  .option(
    '-o, --moduleversioncheck',
    `module version check. [boolean] [default: ${
      defaultConfig.moduleVersionCheck
    }]`
  )
  .option(
    '-j, --modulenodecheck',
    `module node version check. [boolean] [default: ${
      defaultConfig.modulenodecheck
    }]`
  )
  .option(
    '-c, --extraneous-modules',
    `check extraneous in node_modules. [boolean] [default: ${
      defaultConfig.extraneousModulesCheck
    }]`
  )
  .option(
    '-u, --update-check',
    `check if updates are available. [boolean] [default: ${
      defaultConfig.updateCheck
    }]`
  )
  .option(
    '-e, --entry <entry>',
    `entry for project. [string] [required] [default: ${defaultConfig.entry}]`
  )
  .option(
    '-i, --ignore-dirs <dirs>',
    `ignore directories. [string] [required] [default: ${
      defaultConfig.ignoreDirs
    }]`
  )
  .on('--help', () => {
    console.log(`

  Examples:

    One time run test
    $ huel test -s src/

    Watch files and run test on file change
    $ huel test -w -s src/
  `);
  })
  .parse(process.argv);

function getTestOptions(options) {
  return Object.freeze({
    verbose: options.verbose || defaultConfig.verbose,
    all: options.all || defaultConfig.allTests,
    pjv: options.pjv || defaultConfig.packageJsonCheck,
    size: options.size || defaultConfig.sizeLimitCheck,
    depcheck: options.depcheck || defaultConfig.dependencyCheck,
    nodecheck: options.nodecheck || defaultConfig.nodeCheck,
    moduleversioncheck:
      options.moduleversioncheck || defaultConfig.moduleVersionCheck,
    modulenodecheck: options.modulenodecheck || defaultConfig.moduleNodeCheck,
    entry: options.entry || defaultConfig.entry,
    ignoreDirs: options.ignoreDirs || defaultConfig.ignoreDirs,
    strictversion: options.strictVersion || defaultConfig.strictVersion,
    extraneousmodules:
      options.extraneousModules || defaultConfig.extraneousModulesCheck,
    updatecheck: options.updateCheck || defaultConfig.updateCheck
  });
}

main();
function main() {
  const opt = getTestOptions(program);
  tasks.test(opt);
}
